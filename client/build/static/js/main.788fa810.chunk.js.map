{"version":3,"sources":["components/Node/Node.tsx","components/Control/Control.tsx","components/Bbaum/TreeNode.js","components/Bbaum/Tree.js","components/Bbaum/Bbaum.tsx","App.tsx","GlobalStyle.ts","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","maxWidth","marginTop","marginBottom","justifyContent","alignItems","zIndex","item","display","width","padding","border","gap","paddingTop","paddingBottom","backgroundColor","Node","values","searchedFor","classes","Grid","className","container","map","value","valueAsInt","parseInt","valueAsNaN","isNaN","style","flexDirection","row","margin","button","slider","numberInput","limitUpper","limitLower","Control","insert","search","remove","changeOrder","reset","cost","useState","selectedFile","setSelectedFile","inputFile","useRef","amount","setAmount","lowerLimit","setLowerLimit","upperLimit","setUpperLimit","insertionTempo","setInsertionTempo","order","setOrder","shownOrder","setShownOrder","treatNextLine","arr","stop","currentLine","splice","split","console","log","setTimeout","insertRandom","counter","Math","floor","random","useEffect","file","reader","FileReader","onload","e","result","csvText","lines","readAsText","parseCSV","Box","Paper","type","id","ref","onChange","event","target","files","Button","variant","onClick","current","click","TextField","inputProps","pattern","maxLength","label","endLoop","String","Slider","min","step","max","defaultValue","first","second","autoFocus","Typography","ButtonGroup","forEach","Number","isInteger","numbers","i","handleSearch","component","sx","newOrder","ceil","TreeNode","wholeTree","maxChildren","leaf","parent","this","minChildren","maxKeys","minKeys","keys","children","array","length","traverse","push","key","find","node","index","Key","indexOf","indexInParentsChildren","leftSiblingsExists","theftFromSibling","rightSiblingExists","mergeWithSibling","highestKeyFromLeftChild","lowestKeyFromRightChild","reverse","currentKey","siblingSide","parentKeyIndexToSteal","indexToPutParentKeyIn","indexOffset","siblingKeyIndexToSteal","parentIndexToPutSiblingKeyIn","keyFromParent","keyFromSibling","siblingIndexToPutParentKeyIn","sibling","child","addChild","Tree","degree","k","currentRoot","numberOfKeys","newRoot","tree","splitNode","insertNotFullNode","newChild","deletedVal","deleteKey","addKey","deletedKid","deleteChild","currentKeyIndex","oldRoot","j","nodeWithValue","removeKey","checkForParent","borderRadius","outerContainer","canvas","position","Bbaum","myTree","force","setForce","setTree","nodeSize","setNodeSize","Array","fill","treeAsArray","setTreeAsArray","setCost","searchNumber","setSearchNumber","forceUpdate","newForce","normalizeArray","treeTopBottom","level","updateTree","traverseTreeBreadthFirst","traverseTreeBreadthFirstRecursion","childIndex","element","tempTree","nodeCost","toString","delete","hasBorder","levelCopy","levelSplit","childrenIndex","startIndex","endIndex","slice","scaling","round","scalingConvert","xs","App","GlobalStyle","createGlobalStyle","theme","createTheme","palette","primary","main","secondary","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.788fa810.chunk.js","sourcesContent":["// Imports\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// CSS\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 250,\r\n        maxWidth: 600,\r\n        // width: 250,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        zIndex: 100,\r\n    },\r\n    item: {\r\n        // fontSize: 12,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        width: 30,\r\n        padding: 10,\r\n        border: \"1px solid black\",\r\n    },\r\n    gap: {\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        width: 7,\r\n        border: \"1px solid black\",\r\n        backgroundColor: \"#ddd\",\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    values: string[];\r\n    searchedFor: string;\r\n}\r\n\r\nconst Node: React.FC<Props> = ({ values, searchedFor }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid className={classes.root} container>\r\n            {values.map((value) => {\r\n                let valueAsInt: number = parseInt(value);\r\n                let valueAsNaN: boolean = isNaN(valueAsInt);\r\n                return (\r\n                    <>\r\n                        <Grid className={classes.gap} item>\r\n                            &nbsp;\r\n                        </Grid>\r\n                        <Grid\r\n                            className={classes.item}\r\n                            style={{\r\n                                backgroundColor:\r\n                                    searchedFor == value\r\n                                        ? \"#ffc400\"\r\n                                        : valueAsNaN\r\n                                        ? \"#ccc\"\r\n                                        : \"#fafafa\",\r\n                            }}\r\n                            item\r\n                        >\r\n                            {value}\r\n                        </Grid>\r\n                    </>\r\n                );\r\n            })}\r\n            <Grid className={classes.gap} item>\r\n                &nbsp;\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","// Imports\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ButtonGroup, Paper, TextField } from \"@material-ui/core\";\r\n\r\n// CSS\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: 30,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        zIndex: 50,\r\n        flexDirection: \"column\",\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        //flexWrap: \"wrap\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        width: \"90%\",\r\n        margin: 10,\r\n    },\r\n    button: {},\r\n    slider: {\r\n        width: \"30%\",\r\n    },\r\n    numberInput: {\r\n        width: \"4%\",\r\n        margin: 5,\r\n    },\r\n    limitUpper: {\r\n        width: \"6%\",\r\n        margin: 5,\r\n    },\r\n    limitLower: {\r\n        width: \"6%\",\r\n        margin: 5,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    insert: (key: number) => void;\r\n    search: (key: number) => void;\r\n    remove: (key: number) => void;\r\n    changeOrder: (order: number) => void;\r\n    reset: () => void;\r\n    order: number;\r\n    cost: number;\r\n    searchedFor: string;\r\n}\r\n\r\nconst Control: React.FC<Props> = ({\r\n    insert,\r\n    search,\r\n    remove,\r\n    //order,\r\n    changeOrder,\r\n    reset,\r\n    cost,\r\n    searchedFor,\r\n}) => {\r\n    const classes = useStyles();\r\n    // States\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const inputFile = useRef<any>(null);\r\n    const [amount, setAmount] = useState<String>(\"\");\r\n    const [lowerLimit, setLowerLimit] = useState<number>();\r\n    const [upperLimit, setUpperLimit] = useState<number>();\r\n    const [insertionTempo, setInsertionTempo] = useState<number | number[]>(0);\r\n    const [order, setOrder] = useState<number>(4);\r\n    const [shownOrder, setShownOrder] = useState<number>(4);\r\n\r\n    const changeHandler = (event: any) => {\r\n        setSelectedFile(event.target.files[0]);\r\n    };\r\n\r\n    // Reads in the CSV\r\n    const parseCSV = (file: any) => {\r\n        if (file) {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                if (reader.result != null) {\r\n                    let csvText: string | ArrayBuffer = reader.result;\r\n                    if (typeof csvText === \"string\") {\r\n                        let lines = csvText.split(/\\r?\\n/);\r\n                        treatNextLine(lines);\r\n                    }\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n    };\r\n\r\n    // Inserts and deletes based on line of csv\r\n    const treatNextLine = (arr: string[]) => {\r\n        let stop: boolean = false;\r\n\r\n        if (typeof insertionTempo === \"number\") {\r\n            let currentLine: string = arr.splice(0, 1)[0];\r\n            switch (currentLine.split(\",\")[0]) {\r\n                case \"i\":\r\n                    insert(parseInt(currentLine.split(\",\")[1]));\r\n                    break;\r\n                case \"d\":\r\n                    remove(parseInt(currentLine.split(\",\")[1]));\r\n                    break;\r\n                default:\r\n                    console.log(\"Unknown command\");\r\n                    stop = true;\r\n                    break;\r\n            }\r\n\r\n            if (!stop && insertionTempo === 0) {\r\n                treatNextLine(arr);\r\n            } else if (!stop) {\r\n                setTimeout(() => {\r\n                    treatNextLine(arr);\r\n                }, insertionTempo);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Forwards click to input element\r\n    const handleUpload = () => {\r\n        inputFile.current.click();\r\n    };\r\n\r\n    const handleLowerLimit = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setLowerLimit(event.target.value as number);\r\n    };\r\n    const handleUpperLimit = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setUpperLimit(event.target.value as number);\r\n    };\r\n\r\n    // Created random values for btree\r\n    const handleRandom = () => {\r\n        if (upperLimit && lowerLimit) {\r\n            if (lowerLimit <= upperLimit) {\r\n                let endLoop: number =\r\n                    Math.floor(Math.random() * (upperLimit - lowerLimit)) +\r\n                    Math.floor(Math.random() * 2) +\r\n                    parseInt(String(lowerLimit));\r\n                parseInt(String(lowerLimit));\r\n                if (endLoop === 0) {\r\n                    endLoop = 1;\r\n                }\r\n                insertRandom(endLoop);\r\n            } else {\r\n                console.log(\"False limits\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Inserts a single random value\r\n    const insertRandom = (counter: number) => {\r\n        insert(Math.floor(Math.random() * 100) + 1);\r\n        counter--;\r\n        if (typeof insertionTempo === \"number\" && counter > 0) {\r\n            if (insertionTempo === 0) {\r\n                insertRandom(counter);\r\n            } else {\r\n                setTimeout(() => {\r\n                    insertRandom(counter);\r\n                }, insertionTempo);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setAmount(event.target.value as String);\r\n    };\r\n\r\n    const handleOrderChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let newOrder = Math.ceil((event.target.value as number) / 2) * 2;\r\n        setOrder(newOrder);\r\n    };\r\n\r\n    const handleInsert = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    insert(parseInt(item));\r\n                } else {\r\n                    console.log(\"Wrong input passed\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            let i = 0;\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    setTimeout(() => {\r\n                        search(parseInt(item));\r\n                    }, i * 750 * 10);\r\n                    i++;\r\n                } else {\r\n                    console.log(\"Error\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleRemove = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    remove(parseInt(item));\r\n                } else {\r\n                    console.log(\"Error\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChangeOrder = () => {\r\n        changeOrder(order);\r\n        setShownOrder(order);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        reset();\r\n    };\r\n\r\n    const handleSliderChange = (event: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setInsertionTempo(newValue as number);\r\n    };\r\n\r\n    useEffect(() => {\r\n        parseCSV(selectedFile);\r\n    }, [selectedFile]);\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Paper className={classes.row}>\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file\"\r\n                    ref={inputFile}\r\n                    style={{ display: \"none\" }}\r\n                    onChange={changeHandler}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleUpload}>\r\n                    Upload\r\n                </Button>\r\n                <TextField\r\n                    id=\"lowerLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitUpper}\r\n                    label=\"Lower Limit\"\r\n                    onChange={handleLowerLimit}\r\n                />\r\n                <TextField\r\n                    id=\"upperLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitLower}\r\n                    label=\"Upper Limit\"\r\n                    onChange={handleUpperLimit}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleRandom}>\r\n                    Random\r\n                </Button>\r\n                <Slider\r\n                    className={classes.slider}\r\n                    min={0}\r\n                    step={100}\r\n                    max={5000}\r\n                    defaultValue={0}\r\n                    onChange={(first, second) => {\r\n                        handleSliderChange(first, second);\r\n                    }}\r\n                />\r\n            </Paper>\r\n            <Paper className={classes.row}>\r\n                <TextField\r\n                    id=\"numberInput\"\r\n                    inputProps={{ maxLength: 75 }}\r\n                    className={classes.numberInput}\r\n                    autoFocus\r\n                    label=\"Value\"\r\n                    value={amount}\r\n                    onChange={handleTextChange}\r\n                />\r\n                {cost === -3 ? (\r\n                    <Typography>Tree is empty</Typography>\r\n                ) : cost === -2 ? (\r\n                    <Typography>Value not found</Typography>\r\n                ) : (\r\n                    cost !== -1 && (\r\n                        <Typography\r\n                            style={{\r\n                                backgroundColor: searchedFor !== \"\" ? \"#ffc400\" : \"#ffffff\",\r\n                            }}\r\n                        >\r\n                            Cost: {cost}\r\n                        </Typography>\r\n                    )\r\n                )}\r\n\r\n                <ButtonGroup>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleInsert();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Insert\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleSearch();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleRemove();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </ButtonGroup>\r\n\r\n                <Box component=\"div\" sx={{ display: \"inline\" }}>\r\n                    Current Order: {shownOrder}\r\n                </Box>\r\n                <TextField\r\n                    id=\"upperLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitLower}\r\n                    label=\"Order\"\r\n                    onChange={handleOrderChange}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleChangeOrder}>\r\n                    Change Order\r\n                </Button>\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleReset}>\r\n                    Reset\r\n                </Button>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Control;\r\n","export class TreeNode {\r\n    constructor(wholeTree, maxChildren, leaf, parent) {\r\n        this.wholeTree = wholeTree;\r\n        this.maxChildren = maxChildren;\r\n        this.minChildren = Math.ceil(maxChildren / 2);\r\n        this.maxKeys = maxChildren - 1;\r\n        this.minKeys = Math.ceil(maxChildren / 2) - 1;\r\n        this.leaf = leaf; // (boolean) If leaf or not\r\n        this.keys = []; // Array with keys for the nodes (2 * minChildren - 1)\r\n        this.children = []; // Array with child nodes (2 * minChildren)\r\n        this.parent = parent;\r\n        this.cost = 0;\r\n    }\r\n\r\n    traverse() {\r\n        let array = [];\r\n        let i = 0;\r\n        for (i = 0; i < this.keys.length; i++) {\r\n            // Iterate through all leaf notes\r\n            if (this.leaf === false) {\r\n                // If this is not a leaf, then traverse the subtree, before printing the keys\r\n                this.children[i].traverse();\r\n            }\r\n            if (this.keys[i]) {\r\n                array.push(this.keys[i]);\r\n            }\r\n        }\r\n\r\n        if (this.leaf === false) {\r\n            // Print subtree rooted with last child\r\n            this.children[i].traverse();\r\n        }\r\n    }\r\n\r\n    find(key) {\r\n        if (this.parent == null) {\r\n            this.cost = 0;\r\n        }\r\n        let i = 0;\r\n        while (i < this.keys.length && key > this.keys[i]) {\r\n            // Find key which is equal or greater than key\r\n            this.cost++;\r\n            i++;\r\n        }\r\n\r\n        if (this.keys[i] === key) {\r\n            // If key found return the key\r\n            return this;\r\n        }\r\n\r\n        if (this.leaf === true) {\r\n            // If the key is not found it is a leaf\r\n            // Alternative: If the node is a leaf then the key is not in the tree\r\n            return null;\r\n        }\r\n\r\n        // Adds cost to child if the next child is to be searched\r\n        this.children[i].cost = this.cost + 1;\r\n        return this.children[i].find(key); // Go to child of the node to find the key\r\n    }\r\n\r\n    addChild(node, index) {\r\n        // Adds child at given index\r\n        this.children.splice(index, 0, node); // Adds node at given index\r\n        node.parent = this;\r\n    }\r\n\r\n    addKey(Key) {\r\n        if (!Key) return;\r\n        // Search fitting index for insertion and insert it\r\n        let index = 0;\r\n        while (index < this.keys.length && this.keys[index] < Key) {\r\n            index++;\r\n        }\r\n        this.keys.splice(index, 0, Key);\r\n    }\r\n\r\n    deleteChild(index) {\r\n        // If index is set delete child at index and return child\r\n        // (Returning the Child helps with copy operation)\r\n        if (!index) return;\r\n        let deletedChild = this.children.splice(index, 1)[0];\r\n        return deletedChild;\r\n    }\r\n\r\n    deleteKey(index) {\r\n        if (!index) return;\r\n        // Delete key at position if position is inside keys array and return deletedKey\r\n        // (Returning the Key helps with copy operation)\r\n        if (index >= this.keys.length) {\r\n            return null;\r\n        }\r\n        let deletedKey = this.keys.splice(index, 1)[0];\r\n        return deletedKey;\r\n    }\r\n\r\n    get numberOfKeys() {\r\n        return this.keys.length;\r\n    }\r\n\r\n    // Explanation: https://www.programiz.com/dsa/deletion-from-a-b-tree\r\n    removeKey(value) {\r\n        console.log(`------- DELETING ${value} -------`);\r\n\r\n        let index = this.keys.indexOf(value);\r\n        let indexInParentsChildren = this.parent.children.indexOf(this);\r\n\r\n        // NODE IS LEAF\r\n        if (this.leaf) {\r\n            console.log(\"Node is a leaf\");\r\n\r\n            // ENOUGH KEYS\r\n            if (this.keys.length > this.minKeys) {\r\n                console.log(\"Enough keys for simple deletion\");\r\n                return this.keys.splice(index, 1);\r\n            }\r\n\r\n            // NOT ENOUGH KEYS\r\n            console.log(\"NOT enough keys for simple removal\");\r\n\r\n            // SIBLING TO LEFT EXISTS\r\n            let leftSiblingsExists = indexInParentsChildren - 1 >= 0;\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Sibling to the left exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren - 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Left\");\r\n                }\r\n            }\r\n\r\n            // SIBLING TO RIGHT EXISTS\r\n            let rightSiblingExists = indexInParentsChildren + 1 < this.parent.children.length;\r\n            if (rightSiblingExists) {\r\n                console.log(\"Sibling to the right exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren + 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Right\");\r\n                }\r\n            }\r\n\r\n            // MERGE WITH LEFT SIBLING\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Merge with left sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Left\");\r\n            }\r\n\r\n            // MERGE WITH RIGHT SIBLING\r\n            if (rightSiblingExists) {\r\n                console.log(\"Merge with right sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Right\");\r\n            }\r\n        }\r\n\r\n        // NODE IS INTERNAL\r\n        console.log(\"Node is internal\");\r\n\r\n        // Check if child \"to the left\" has more than the minimum number of keys\r\n        // Index of deleted key === key of child that has lesser values\r\n\r\n        // STEAL FROM LEFT CHILD\r\n        if (this.children[index].keys.length > this.minKeys) {\r\n            console.log(\"Left child to key has enough keys\");\r\n\r\n            // Take highest key of left child\r\n            let highestKeyFromLeftChild = this.children[index].keys.splice(\r\n                this.children[index].keys.length - 1,\r\n                1\r\n            )[0];\r\n\r\n            // Put that key at the place where the old key was deleted\r\n            return (this.keys[index] = highestKeyFromLeftChild);\r\n        }\r\n\r\n        // STEAL FROM RIGHT CHILD\r\n        if (this.children[index + 1].keys.length > this.minKeys) {\r\n            console.log(\"Right child to key has enough keys\");\r\n\r\n            // Take lowest key from right child\r\n            let lowestKeyFromRightChild = this.children[index + 1].keys.splice(0, 1)[0];\r\n\r\n            // Put that key at the place where the old key was deleted\r\n            return (this.keys[index] = lowestKeyFromRightChild);\r\n        }\r\n\r\n        console.log(\"Merge left and right children\");\r\n        // MERGE LEFT AND RIGHT CHILDREN\r\n        this.keys.splice(index, 1);\r\n\r\n        // Get keys from left child\r\n        let keysFromLeftChild = this.children[index].keys;\r\n\r\n        // Put keys in right child\r\n        keysFromLeftChild.reverse().forEach((currentKey) => {\r\n            this.children[index + 1].keys.splice(0, 0, currentKey);\r\n        });\r\n\r\n        this.children.splice(index, 1);\r\n\r\n        if (this.keys < this.minKeys) {\r\n            console.log(\"NOT enough keys anymore\");\r\n\r\n            // SIBLING TO LEFT EXISTS\r\n            let leftSiblingsExists = indexInParentsChildren - 1 >= 0;\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Sibling to the left exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren - 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Left\");\r\n                }\r\n            }\r\n\r\n            // SIBLING TO RIGHT EXISTS\r\n            let rightSiblingExists = indexInParentsChildren + 1 < this.parent.children.length;\r\n            if (rightSiblingExists) {\r\n                console.log(\"Sibling to the right exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren + 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Right\");\r\n                }\r\n            }\r\n\r\n            // MERGE WITH LEFT SIBLING\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Merge with left sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Left\");\r\n            }\r\n\r\n            // MERGE WITH RIGHT SIBLING\r\n            if (rightSiblingExists) {\r\n                console.log(\"Merge with right sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    theftFromSibling(index, indexInParentsChildren, siblingSide) {\r\n        // Delete key in this node\r\n        this.keys.splice(index, 1);\r\n\r\n        // Set sibling dependent variables\r\n        let parentKeyIndexToSteal = siblingSide === \"Left\" ? 0 : this.parent.keys.length - 1;\r\n        let indexToPutParentKeyIn = siblingSide === \"Left\" ? 0 : this.keys.length;\r\n        let indexOffset = siblingSide === \"Left\" ? -1 : 1;\r\n        let siblingKeyIndexToSteal =\r\n            siblingSide === \"Left\"\r\n                ? this.parent.children[indexInParentsChildren - 1].keys.length - 1\r\n                : 0;\r\n        let parentIndexToPutSiblingKeyIn = siblingSide === \"Left\" ? 0 : this.parent.keys.length;\r\n\r\n        // Steal lowest / highest key from parent\r\n        let keyFromParent = this.parent.keys.splice(parentKeyIndexToSteal, 1)[0];\r\n        this.keys.splice(indexToPutParentKeyIn, 0, keyFromParent);\r\n\r\n        // Put highest / lowest key from right sibling in parent\r\n        let keyFromSibling = this.parent.children[indexInParentsChildren + indexOffset].keys.splice(\r\n            siblingKeyIndexToSteal,\r\n            1\r\n        )[0];\r\n        this.parent.keys.splice(parentIndexToPutSiblingKeyIn, 0, keyFromSibling);\r\n    }\r\n\r\n    mergeWithSibling(index, indexInParentsChildren, siblingSide) {\r\n        // Delete key in this node\r\n        this.keys.splice(index, 1);\r\n\r\n        // Set sibling dependent variables\r\n        let indexOffset = siblingSide === \"Left\" ? -1 : 1;\r\n        let siblingIndexToPutParentKeyIn =\r\n            siblingSide === \"Left\"\r\n                ? this.parent.children[indexInParentsChildren + indexOffset].keys.length\r\n                : 0;\r\n        let sibling = this.parent.children[indexInParentsChildren + indexOffset];\r\n\r\n        // Put lowest key from parent in sibling\r\n        let keyFromParent = this.parent.keys.splice(0, 1)[0];\r\n        this.parent.children[indexInParentsChildren + indexOffset].keys.splice(\r\n            siblingIndexToPutParentKeyIn,\r\n            0,\r\n            keyFromParent\r\n        );\r\n\r\n        // Give children to sibling\r\n        if (this.children.length > 0) {\r\n            this.children.forEach((child) => {\r\n                child.parent = sibling;\r\n                sibling.addChild(child, sibling.children.length);\r\n            });\r\n        }\r\n\r\n        // Remove self from children list in parent\r\n        this.parent.children.splice(indexInParentsChildren, 1);\r\n    }\r\n\r\n    checkForParent() {\r\n        if (this.parent.keys < this.minKeys) {\r\n            console.log(\"Parent does NOT have enough keys\");\r\n            this.wholeTree.root = this.parent.children[0];\r\n        }\r\n    }\r\n}\r\n","import { TreeNode } from \"./TreeNode\";\r\n\r\nexport class Tree {\r\n    constructor(degree) {\r\n        this.root = null;\r\n        this.maxChildren = degree;\r\n        this.minChildren = Math.ceil(degree / 2);\r\n        this.maxKeys = degree - 1;\r\n        this.minKeys = Math.ceil(degree / 2) - 1;\r\n    }\r\n\r\n    traverse() {\r\n        if (this.root != null) {\r\n            // Check if tree is empty\r\n            this.root.traverse();\r\n        } else {\r\n            console.log(\"Tree is empty\");\r\n        }\r\n    }\r\n\r\n    find(k) {\r\n        if (this.root === null) {\r\n            // Check if tree is empty\r\n            return null;\r\n        } else {\r\n            if (this.root.find(k) != null || undefined) {\r\n                return this.root.find(k);\r\n            } else {\r\n                return \"Key not found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    insert(key) {\r\n        let currentRoot = this.root;\r\n\r\n        if (currentRoot === null) {\r\n            // Check if tree is empty\r\n            this.root = new TreeNode(this, this.maxChildren, true, null); // make new node as leaf\r\n            this.root.keys[0] = key; // add key to the node\r\n        } else if (currentRoot.numberOfKeys === this.maxKeys) {\r\n            // If root is full create a new node to become the root\r\n            // Make the old root a child of the new Root\r\n            let newRoot = new TreeNode(this, this.root.maxChildren, false, null);\r\n            newRoot.tree = this;\r\n            this.root = newRoot;\r\n            newRoot.addChild(currentRoot, 0);\r\n            this.splitNode(currentRoot, newRoot, 1);\r\n\r\n            // After split add key normally\r\n            this.insertNotFullNode(newRoot, parseInt(key));\r\n        } else {\r\n            // Else just insert the value into next best node\r\n            this.insertNotFullNode(currentRoot, parseInt(key));\r\n        }\r\n    }\r\n\r\n    splitNode(child, parent, index) {\r\n        // Create a new child\r\n        let newChild = new TreeNode(this, this.maxChildren, child.leaf, parent);\r\n\r\n        // Give the new child the keys from the old child\r\n        for (let k = 1; k < this.minChildren; k++) {\r\n            let deletedVal = child.deleteKey(this.minChildren);\r\n            newChild.addKey(deletedVal);\r\n        }\r\n\r\n        // Give the new child the children from the old child\r\n        if (!child.leaf) {\r\n            for (let k = 1; k <= this.minChildren; k++) {\r\n                let deletedKid = child.deleteChild(this.minChildren);\r\n                newChild.addChild(deletedKid, k - 1);\r\n            }\r\n        }\r\n\r\n        // Give parent the new child\r\n        parent.addChild(newChild, index);\r\n\r\n        // Give parent the key\r\n        let deletedVal = child.deleteKey(this.minChildren - 1);\r\n        parent.addKey(deletedVal);\r\n        parent.leaf = false;\r\n    }\r\n\r\n    insertNotFullNode(node, key) {\r\n        if (node.leaf) {\r\n            // Give lead node the key\r\n            node.addKey(key);\r\n            return;\r\n        }\r\n\r\n        // Iterate through the keys to see where the new Key should be added\r\n        let currentKeyIndex = node.numberOfKeys;\r\n        while (currentKeyIndex > 0 && key < node.keys[currentKeyIndex - 1]) {\r\n            currentKeyIndex--;\r\n        }\r\n\r\n        let inserted = false;\r\n        if (node.children[currentKeyIndex].numberOfKeys === this.maxKeys) {\r\n            // Split the node if node is already full\r\n            this.splitNode(node.children[currentKeyIndex], node, currentKeyIndex + 1);\r\n\r\n            // After splitting the node check to which child the key should be added\r\n            if (key > node.keys[currentKeyIndex]) {\r\n                currentKeyIndex++;\r\n            }\r\n        }\r\n\r\n        if (inserted === false) {\r\n            this.insertNotFullNode(node.children[currentKeyIndex], key);\r\n        }\r\n    }\r\n\r\n    splitRoot() {\r\n        let newRoot = new TreeNode(this, this.maxChildren, false, null);\r\n        let oldRoot = this.root;\r\n        this.root = newRoot;\r\n\r\n        newRoot.addKey(oldRoot.deleteKey(this.minChildren - 1));\r\n\r\n        for (let i = 0; i < oldRoot.numberOfKeys; i++) {\r\n            let newChild = new TreeNode(this, this.maxChildren, false, this.root);\r\n\r\n            newChild.addKey(oldRoot.keys[i]);\r\n            newRoot.addChild(newChild, i);\r\n\r\n            for (let j = 0 + i; j < this.minChildren + i; j++) {\r\n                newChild.addChild(oldRoot.children[j + i], j);\r\n            }\r\n        }\r\n    }\r\n\r\n    delete(k) {\r\n        let nodeWithValue = this.find(k);\r\n\r\n        if (nodeWithValue === null) return null;\r\n\r\n        nodeWithValue.removeKey(k);\r\n        nodeWithValue.checkForParent();\r\n    }\r\n}\r\n","// Imports\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid, { GridSize } from \"@material-ui/core/Grid\";\r\n\r\nimport Node from \"../../components/Node/Node\";\r\nimport Control from \"../../components/Control/Control\";\r\n\r\nimport { Tree } from \"./Tree\";\r\nimport { TreeNode } from \"./TreeNode\";\r\nimport node from \"../../components/Node/Node\";\r\nimport React from \"react\";\r\n\r\n// CSS\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 5,\r\n    },\r\n    container: {\r\n        marginTop: 30,\r\n        borderRadius: 50,\r\n        backgroundColor: \"#E9E9E9\",\r\n        justifyContent: \"space-around\",\r\n    },\r\n    outerContainer: {\r\n        justifyContent: \"space-around\",\r\n    },\r\n    canvas: {\r\n        position: \"absolute\",\r\n    },\r\n});\r\n\r\ninterface Props {}\r\n\r\nconst Bbaum: React.FC<Props> = () => {\r\n    const classes = useStyles();\r\n    // Table for all possible orders:\r\n    //Knuth Order, k |  (min,max)  | CLRS Degree, t\r\n    // ---------------|-------------|---------------\r\n    //      0         |      -      |        –\r\n    //      1         |      –      |        –\r\n    //      2         |      –      |        –\r\n    //      3         |    (2,3)    |        –\r\n    //      4         |    (2,4)    |      t = 2\r\n    //      5         |    (3,5)    |        –\r\n    //      6         |    (3,6)    |      t = 3\r\n    //      7         |    (4,7)    |        –\r\n    //      8         |    (4,8)    |      t = 4\r\n    //      9         |    (5,9)    |        –\r\n    //      10        |    (5,10)   |      t = 5\r\n    let myTree: Tree = new Tree(4);\r\n\r\n    // States\r\n    const [force, setForce] = useState<number>(1);\r\n    const [tree, setTree] = useState<Tree>(new Tree(4)); // Der tatsächliche Baum\r\n    const [nodeSize, setNodeSize] = useState<number>(tree.maxChildren);\r\n    const [order, setOrder] = useState(tree.maxChildren);\r\n    const [treeAsArray, setTreeAsArray] = useState<string[][][]>(\r\n        new Array(1).fill(new Array(1).fill(new Array(1).fill(\" \")))\r\n    );\r\n    const [cost, setCost] = useState<number>(-1);\r\n    const [searchNumber, setSearchNumber] = useState<string>(\"\");\r\n\r\n    // Forces new rendering\r\n    const forceUpdate = () => {\r\n        let newForce: number = Math.random();\r\n        setForce(newForce);\r\n    };\r\n\r\n    // Makes all array the same size\r\n    const normalizeArray = () => {\r\n        treeTopBottom.forEach((level) => {\r\n            level.forEach((node) => {\r\n                while (node.length < nodeSize) {\r\n                    node.push(\"‎‎‏‏‎ ‎\");\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Updates the array version of the btree\r\n    const updateTree = () => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    };\r\n\r\n    // Insert value into btree\r\n    const insert = (key: number) => {\r\n        let tempTree: Tree = tree;\r\n        tempTree.insert(key);\r\n        myTree = tempTree;\r\n        setTree(tempTree);\r\n        forceUpdate();\r\n    };\r\n\r\n    // Search value in btree\r\n    const search = (key: number) => {\r\n        let node = tree.find(key);\r\n        if (node === null) {\r\n            setCost(-3);\r\n            return;\r\n        }\r\n        let nodeCost = node.cost;\r\n        if (nodeCost == null || undefined) {\r\n            setCost(-2);\r\n        } else {\r\n            setCost(nodeCost);\r\n            for (let i = 0; i < 10; i++) {\r\n                setTimeout(() => {\r\n                    setSearchNumber(i % 2 === 0 ? key.toString() : \"\");\r\n                    forceUpdate();\r\n                }, 750 * i);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Remove value from btree\r\n    const remove = (key: number) => {\r\n        let tempTree: Tree = tree;\r\n        tempTree.delete(key);\r\n        setTree(tempTree);\r\n        updateTree();\r\n        forceUpdate();\r\n    };\r\n\r\n    // Reset btree (Delete all values)\r\n    const reset = () => {\r\n        myTree.root = null;\r\n        tree.root = null;\r\n        updateTree();\r\n    };\r\n\r\n    // Change the order of the tree and insert all values again\r\n    const changeOrder = (order: number) => {\r\n        if (order < 4) order = 4;\r\n        let newOrder = Math.ceil(order / 2) * 2;\r\n        setOrder(newOrder);\r\n        let tempTree: Tree = new Tree(newOrder);\r\n        for (let i = 0; i < treeAsArray.length; i++) {\r\n            for (let j = 0; j < treeAsArray[i].length; j++) {\r\n                for (let k = 0; k < treeAsArray[i][j].length; k++) {\r\n                    tempTree.insert(treeAsArray[i][j][k]);\r\n                }\r\n            }\r\n        }\r\n        myTree = tempTree;\r\n        setTree(tempTree);\r\n    };\r\n\r\n    // Save tree from top to bottom as numbers\r\n    let treeTopBottom: string[][][] = [];\r\n    treeTopBottom[0] = [[]];\r\n\r\n    const traverseTreeBreadthFirst = (root: TreeNode | null, level: number) => {\r\n        if (root != null) {\r\n            let childIndex = 0;\r\n            // Initialize current tree level in array\r\n            treeTopBottom[level][childIndex] = [];\r\n\r\n            // Iterate over all keys of a node\r\n            root?.keys.forEach((key: string, index: number) => {\r\n                treeTopBottom[level][childIndex][index] = key;\r\n            });\r\n        }\r\n        treeTopBottom[1] = [];\r\n\r\n        traverseTreeBreadthFirstRecursion(root, 1);\r\n\r\n        normalizeArray();\r\n\r\n        return treeTopBottom;\r\n    };\r\n\r\n    const traverseTreeBreadthFirstRecursion = (root: TreeNode | null, level: number) => {\r\n        let childIndex = 0;\r\n        // Determines the childIndex for the current level\r\n        for (let i = 0; i < treeTopBottom[level].length; i++) {\r\n            childIndex = i;\r\n        }\r\n        if (treeTopBottom[level].length > 1) {\r\n            childIndex++;\r\n        }\r\n\r\n        if (root != null) {\r\n            // Iterate over all children of root to get their values\r\n            root?.children.forEach((child) => {\r\n                treeTopBottom[level][childIndex] = [];\r\n\r\n                // Iterate over all keys of a node\r\n                child.keys.forEach((key: string, index: number) => {\r\n                    treeTopBottom[level][childIndex][index] = key;\r\n                });\r\n                childIndex++;\r\n            });\r\n            // Add border element to indicate children end of the current root\r\n            if (treeTopBottom[level].length !== 0) {\r\n                treeTopBottom[level][childIndex] = [\"border\"];\r\n            }\r\n\r\n            // Iterate over all children of a node\r\n            root.children.forEach((child) => {\r\n                childIndex = 0;\r\n                // Check if next level has been initialized\r\n                if (typeof treeTopBottom[level + 1] === \"undefined\") {\r\n                    // Define undefined level\r\n                    treeTopBottom[level + 1] = [];\r\n                }\r\n                traverseTreeBreadthFirstRecursion(child, level + 1);\r\n            });\r\n        }\r\n    };\r\n\r\n    // Is called once at the beginning\r\n    useEffect(() => {\r\n        tree.traverse();\r\n        normalizeArray();\r\n\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n\r\n        normalizeArray();\r\n        treeTopBottom.forEach((element) => {});\r\n\r\n        setTreeAsArray(treeTopBottom);\r\n    }, []);\r\n\r\n    // Is called everytime maxChildren of tree changes\r\n    useEffect(() => {\r\n        setNodeSize(tree.maxChildren);\r\n    }, [tree.maxChildren]);\r\n\r\n    // Is called everytime the nodeSize changes\r\n    useEffect(() => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    }, [nodeSize]);\r\n\r\n    // Is called everytime a rendering is forced\r\n    useEffect(() => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    }, [force]);\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            {/* Part of the UI that controls everything */}\r\n            <Control\r\n                insert={insert}\r\n                search={search}\r\n                remove={remove}\r\n                order={order}\r\n                changeOrder={changeOrder}\r\n                reset={reset}\r\n                cost={cost}\r\n                searchedFor={searchNumber}\r\n            />\r\n\r\n            {/* Displays the btree */}\r\n            {treeAsArray.map((level) => {\r\n                let hasBorder = false;\r\n\r\n                let levelCopy: string[][] = level;\r\n                let levelSplit: string[][][] = [];\r\n                let childrenIndex: number = 0;\r\n                let startIndex: number = 0;\r\n                let endIndex: number = 0;\r\n\r\n                level.forEach((node) => {\r\n                    levelSplit[childrenIndex] = [[]];\r\n                    if (node[0] === \"border\") {\r\n                        levelSplit[childrenIndex] = levelCopy.slice(startIndex, endIndex);\r\n                        childrenIndex++;\r\n\r\n                        startIndex = endIndex;\r\n                        // Skips border node\r\n                        startIndex++;\r\n\r\n                        hasBorder = true;\r\n                    }\r\n                    endIndex++;\r\n                });\r\n\r\n                // Adds whole level to levelSplit because level without borders wont be added in loop\r\n                if (!hasBorder) {\r\n                    levelSplit[childrenIndex] = levelCopy;\r\n                }\r\n\r\n                // Apply appropriate scaling factor to Grids\r\n                let scaling: number = 12;\r\n                if (levelSplit.length !== 0) {\r\n                    scaling = 12 / levelSplit.length;\r\n                    scaling = Math.round(scaling);\r\n                }\r\n                let scalingConvert: GridSize = scaling as GridSize;\r\n\r\n                // Return Grid for current level\r\n                return (\r\n                    <Grid className={classes.outerContainer} container>\r\n                        {levelSplit.map((element) => {\r\n                            return (\r\n                                <Grid className={classes.container} xs={scalingConvert} container>\r\n                                    {element.map((node) => {\r\n                                        return <Node searchedFor={searchNumber} values={node} />;\r\n                                    })}\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Bbaum;\r\n","import Bbaum from \"./components/Bbaum/Bbaum\";\r\n\r\nconst App: React.FC = () => {\r\n    return <Bbaum />;\r\n};\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n   /* roboto-300 - latin */\r\n//   @font-face {\r\n//     font-family: 'Roboto';\r\n//     font-style: normal;\r\n//     font-weight: 300;\r\n//     src: url('../fonts/roboto-v27-latin-300.eot'); /* IE9 Compat Modes */\r\n//     src: local(''),\r\n//          url('../fonts/roboto-v27-latin-300.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n//          url('../fonts/roboto-v27-latin-300.woff2') format('woff2'), /* Super Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.woff') format('woff'), /* Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.ttf') format('truetype'), /* Safari, Android, iOS */\r\n//          url('../fonts/roboto-v27-latin-300.svg#Roboto') format('svg'); /* Legacy iOS */\r\n//   }\r\n\r\n   *{\r\n        margin: 0;\r\n        padding: 0;\r\n        -moz-box-sizing: border-box;\r\n        -webkit-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n        font-family: \"Roboto\", sans-serif;\r\n   }\r\n\r\n   /* This is here to make my eyes hurt less at night */\r\n   body{\r\n      /* background-color: #292929; */\r\n      background-color: #F9F9F9;\r\n   }\r\n\r\n   /* html {\r\n        font-size: 62.5%;\r\n   } */\r\n   `;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#c62828\",\r\n        },\r\n        secondary: {\r\n            main: \"#ff9800\",\r\n        },\r\n        background: {\r\n            default: \"#00ff00\",\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GlobalStyle />\r\n        <ThemeProvider theme={theme}>\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}