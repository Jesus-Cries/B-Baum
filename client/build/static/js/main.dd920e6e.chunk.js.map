{"version":3,"sources":["components/Node/Node.tsx","components/Control/Control.tsx","components/Bbaum/TreeNode.js","components/Bbaum/Tree.js","components/Bbaum/Bbaum.tsx","App.tsx","GlobalStyle.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","marginTop","marginBottom","justifyContent","alignItems","zIndex","item","display","padding","borderTop","borderBottom","gap","paddingTop","paddingBottom","border","backgroundColor","Node","values","searchedFor","classes","Grid","className","container","map","value","valueAsInt","parseInt","valueAsNaN","isNaN","style","flexDirection","row","margin","button","slider","numberInput","limitUpper","limitLower","Control","random","insert","search","remove","changeOrder","reset","cost","useState","selectedFile","setSelectedFile","inputFile","useRef","amount","setAmount","lowerLimit","setLowerLimit","upperLimit","setUpperLimit","insertionTempo","setInsertionTempo","order","setOrder","treatNextLine","arr","stop","currentLine","splice","console","log","split","setTimeout","insertRandom","counter","Math","floor","useEffect","file","reader","FileReader","onload","e","result","csvText","lines","readAsText","parseCSV","Box","Paper","type","id","ref","onChange","event","target","files","Button","variant","onClick","current","click","TextField","inputProps","pattern","maxLength","label","endLoop","String","autoFocus","Typography","ButtonGroup","forEach","Number","isInteger","numbers","i","handleSearch","Slider","min","step","max","defaultValue","first","second","component","sx","newOrder","ceil","TreeNode","maxChildren","leaf","parent","this","minChildren","maxKeys","minKeys","keys","children","array","length","traverse","push","key","find","node","index","Key","indexOf","indexInParentsChildren","leftSiblingsExists","theftFromSibling","rightSiblingExists","mergeWithSibling","highestKeyFromLeftChild","lowestKeyFromRightChild","keysFromLeftChild","siblingSide","parentKeyIndexToSteal","indexToPutParentKeyIn","indexOffset","siblingKeyIndexToSteal","parentIndexToPutSiblingKeyIn","keyFromParent","keyFromSibling","siblingIndexToPutParentKeyIn","sibling","child","addChild","Tree","degree","k","currentRoot","numberOfKeys","newRoot","tree","splitNode","insertNotFullNode","newChild","deletedVal","deleteKey","addKey","deletedKid","deleteChild","currentKeyIndex","oldRoot","j","nodeWithValue","removeKey","borderRadius","outerContainer","canvas","position","Bbaum","myTree","force","setForce","setTree","nodeSize","setNodeSize","Array","fill","treeAsArray","setTreeAsArray","setCost","searchNumber","setSearchNumber","forceUpdate","newForce","normalizeArray","treeTopBottom","level","updateTree","traverseTreeBreadthFirst","traverseTreeBreadthFirstRecursion","childIndex","element","tempTree","nodeCost","toString","delete","hasBorder","levelCopy","levelSplit","childrenIndex","startIndex","endIndex","slice","scaling","round","scalingConvert","xs","App","GlobalStyle","createGlobalStyle","theme","createTheme","palette","primary","main","secondary","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.dd920e6e.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 250,\r\n        marginTop: 35,\r\n        marginBottom: 35,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        zIndex: 100,\r\n    },\r\n    item: {\r\n        // fontSize: 12,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        width: 30,\r\n        padding: 10,\r\n        borderTop: \"1px solid black\",\r\n        borderBottom: \"1px solid black\",\r\n    },\r\n    gap: {\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        width: 7,\r\n        border: \"1px solid black\",\r\n        backgroundColor: \"#ddd\",\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    values: string[];\r\n    searchedFor: string;\r\n}\r\n\r\nconst Node: React.FC<Props> = ({ values, searchedFor }) => {\r\n    const classes = useStyles();\r\n    // let i = -1;\r\n\r\n    return (\r\n        <Grid className={classes.root} container>\r\n            {values.map((value) => {\r\n                let valueAsInt: number = parseInt(value);\r\n                let valueAsNaN: boolean = isNaN(valueAsInt);\r\n                // i++;\r\n                return (\r\n                    <>\r\n                        <Grid className={classes.gap} item>\r\n                            &nbsp;\r\n                        </Grid>\r\n                        <Grid\r\n                            className={classes.item}\r\n                            style={{\r\n                                backgroundColor:\r\n                                    searchedFor == value\r\n                                        ? \"#ffc400\"\r\n                                        : valueAsNaN\r\n                                        ? \"#ccc\"\r\n                                        : \"#fafafa\",\r\n                            }}\r\n                            item\r\n                        >\r\n                            {value}\r\n                        </Grid>\r\n                    </>\r\n                );\r\n            })}\r\n            <Grid className={classes.gap} item>\r\n                &nbsp;\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Node;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ButtonGroup, Paper, TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: 30,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        zIndex: 50,\r\n        flexDirection: \"column\",\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        //flexWrap: \"wrap\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        width: \"90%\",\r\n        margin: 10,\r\n    },\r\n    button: {},\r\n    slider: {\r\n        width: \"30%\",\r\n    },\r\n    numberInput: {\r\n        width: \"4%\",\r\n        margin: 5,\r\n    },\r\n    limitUpper: {\r\n        width: \"6%\",\r\n        margin: 5,\r\n    },\r\n    limitLower: {\r\n        width: \"6%\",\r\n        margin: 5,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    random: () => void;\r\n    insert: (key: number) => void;\r\n    search: (key: number) => void;\r\n    remove: (key: number) => void;\r\n    changeOrder: (order: number) => void;\r\n    reset: () => void;\r\n    order: number;\r\n    cost: number;\r\n    searchedFor: string;\r\n}\r\n\r\nconst Control: React.FC<Props> = ({\r\n    random,\r\n    insert,\r\n    search,\r\n    remove,\r\n    //order,\r\n    changeOrder,\r\n    reset,\r\n    cost,\r\n    searchedFor,\r\n}) => {\r\n    const classes = useStyles();\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const inputFile = useRef<any>(null);\r\n    const [amount, setAmount] = useState<String>(\"\");\r\n    const [lowerLimit, setLowerLimit] = useState<number>();\r\n    const [upperLimit, setUpperLimit] = useState<number>();\r\n    const [insertionTempo, setInsertionTempo] = useState<number | number[]>(0);\r\n    const [order, setOrder] = useState<number>(4);\r\n\r\n    const changeHandler = (event: any) => {\r\n        setSelectedFile(event.target.files[0]);\r\n    };\r\n\r\n    const parseCSV = (file: any) => {\r\n        if (file) {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                if (reader.result != null) {\r\n                    let csvText: string | ArrayBuffer = reader.result;\r\n                    if (typeof csvText === \"string\") {\r\n                        let lines = csvText.split(/\\r?\\n/);\r\n                        treatNextLine(lines);\r\n                    }\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n    };\r\n\r\n    const treatNextLine = (arr: string[]) => {\r\n        let stop: boolean = false;\r\n\r\n        if (typeof insertionTempo === \"number\") {\r\n            let currentLine: string = arr.splice(0, 1)[0];\r\n            console.log(\"CurrentLine: \" + currentLine);\r\n            switch (currentLine.split(\",\")[0]) {\r\n                case \"i\":\r\n                    insert(parseInt(currentLine.split(\",\")[1]));\r\n                    break;\r\n                case \"d\":\r\n                    remove(parseInt(currentLine.split(\",\")[1]));\r\n                    break;\r\n                default:\r\n                    console.log(\"Unknown command\");\r\n                    stop = true;\r\n                    break;\r\n            }\r\n\r\n            if (!stop) {\r\n                setTimeout(() => {\r\n                    treatNextLine(arr);\r\n                }, insertionTempo);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Forwards click to input element\r\n    const handleUpload = () => {\r\n        inputFile.current.click();\r\n    };\r\n\r\n    const handleLowerLimit = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setLowerLimit(event.target.value as number);\r\n    };\r\n    const handleUpperLimit = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setUpperLimit(event.target.value as number);\r\n    };\r\n\r\n    const handleRandom = () => {\r\n        if (upperLimit && lowerLimit) {\r\n            if (lowerLimit <= upperLimit) {\r\n                let endLoop: number =\r\n                    Math.floor(Math.random() * (upperLimit - lowerLimit)) +\r\n                    Math.floor(Math.random() * 2) +\r\n                    parseInt(String(lowerLimit));\r\n                parseInt(String(lowerLimit));\r\n                //parseInt(Math.floor(Math.random() * (upperLimit - lowerLimit))) + lowerLimit;\r\n                console.log(\"Endloop: \" + endLoop);\r\n                if (endLoop === 0) {\r\n                    endLoop = 1;\r\n                }\r\n                insertRandom(endLoop);\r\n            } else {\r\n                console.log(\"False limits\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const insertRandom = (counter: number) => {\r\n        insert(Math.floor(Math.random() * 100) + 1);\r\n        counter--;\r\n        if (typeof insertionTempo === \"number\" && counter > 0) {\r\n            setTimeout(() => {\r\n                insertRandom(counter);\r\n            }, insertionTempo);\r\n        }\r\n    };\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setAmount(event.target.value as String);\r\n    };\r\n\r\n    const handleOrderChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let newOrder = Math.ceil((event.target.value as number) / 2) * 2;\r\n        setOrder(newOrder);\r\n    };\r\n\r\n    const handleInsert = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    insert(parseInt(item));\r\n                } else {\r\n                    console.log(\"Wrong input passed\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            let i = 0;\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    setTimeout(() => {\r\n                        search(parseInt(item));\r\n                    }, i * 750 * 10);\r\n                    i++;\r\n                } else {\r\n                    console.log(\"error\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleRemove = () => {\r\n        if (amount) {\r\n            let numbers = amount.split(\",\");\r\n            numbers.forEach(function (item) {\r\n                if (Number.isInteger(parseInt(item))) {\r\n                    remove(parseInt(item));\r\n                } else {\r\n                    console.log(\"error\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChangeOrder = () => {\r\n        changeOrder(order);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        reset();\r\n    };\r\n\r\n    //const handleTempo = (\r\n    //    event: React.ChangeEvent<{ value: number | Array<number>; activeThumb: number }>\r\n    //) => {\r\n    //    setInsertionTempo(event.target.value as number);\r\n    //};\r\n\r\n    const handleSliderChange = (event: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setInsertionTempo(newValue as number);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(selectedFile);\r\n        parseCSV(selectedFile);\r\n        //changeTempo(insertionTempo);\r\n    }, [selectedFile]);\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Paper className={classes.row}>\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file\"\r\n                    ref={inputFile}\r\n                    style={{ display: \"none\" }}\r\n                    onChange={changeHandler}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleUpload}>\r\n                    Upload\r\n                </Button>\r\n                <TextField\r\n                    id=\"lowerLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitUpper}\r\n                    label=\"Lower Limit\"\r\n                    onChange={handleLowerLimit}\r\n                />\r\n                <TextField\r\n                    id=\"upperLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitLower}\r\n                    label=\"Upper Limit\"\r\n                    onChange={handleUpperLimit}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleRandom}>\r\n                    Random\r\n                </Button>\r\n\r\n                <TextField\r\n                    id=\"numberInput\"\r\n                    inputProps={{ maxLength: 75 }}\r\n                    className={classes.numberInput}\r\n                    autoFocus\r\n                    label=\"Value\"\r\n                    value={amount}\r\n                    onChange={handleTextChange}\r\n                />\r\n                {cost === -3 ? (\r\n                    <Typography>Tree is empty</Typography>\r\n                ) : cost === -2 ? (\r\n                    <Typography>Key not found</Typography>\r\n                ) : (\r\n                    cost !== -1 && (\r\n                        <Typography\r\n                            style={{\r\n                                backgroundColor: searchedFor !== \"\" ? \"#ffc400\" : \"#ffffff\",\r\n                            }}\r\n                        >\r\n                            Cost: {cost}\r\n                        </Typography>\r\n                    )\r\n                )}\r\n\r\n                <ButtonGroup>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleInsert();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Insert\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleSearch();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            handleRemove();\r\n                            setAmount(\"\");\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Paper>\r\n            <Paper className={classes.row}>\r\n                <Slider\r\n                    className={classes.slider}\r\n                    min={0}\r\n                    step={100}\r\n                    max={5000}\r\n                    defaultValue={0}\r\n                    onChange={(first, second) => {\r\n                        handleSliderChange(first, second);\r\n                    }}\r\n                />\r\n                <Box component=\"div\" sx={{ display: \"inline\" }}>\r\n                    Current Order: {order}\r\n                </Box>\r\n                <TextField\r\n                    id=\"upperLimit\"\r\n                    inputProps={{ type: \"number\", pattern: \"[0-9]*\", maxLength: 75 }}\r\n                    className={classes.limitLower}\r\n                    label=\"Order\"\r\n                    onChange={handleOrderChange}\r\n                />\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleChangeOrder}>\r\n                    Change Order\r\n                </Button>\r\n                <Button className={classes.button} variant=\"contained\" onClick={handleReset}>\r\n                    Reset\r\n                </Button>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Control;\r\n","export class TreeNode {\r\n    constructor(maxChildren, leaf, parent) {\r\n        this.maxChildren = maxChildren;\r\n        this.minChildren = Math.ceil(maxChildren / 2);\r\n        this.maxKeys = maxChildren - 1;\r\n        this.minKeys = Math.ceil(maxChildren / 2) - 1;\r\n        this.leaf = leaf; // (boolean) If leaf or not\r\n        this.keys = []; // Array with keys for the nodes (2 * minChildren - 1)\r\n        this.children = []; // Array with child nodes (2 * minChildren)\r\n        this.parent = parent;\r\n        this.cost = 0;\r\n    }\r\n\r\n    traverse() {\r\n        let array = [];\r\n        let i = 0;\r\n        for (i = 0; i < this.keys.length; i++) {\r\n            // Iterate through all leaf notes\r\n            if (this.leaf === false) {\r\n                // If this is not a leaf, then traverse the subtree, before printing the keys\r\n                this.children[i].traverse();\r\n            }\r\n            if (this.keys[i]) {\r\n                // console.log(this.keys[i]);\r\n                array.push(this.keys[i]);\r\n            }\r\n        }\r\n        //console.log(this.keys);\r\n\r\n        if (this.leaf === false) {\r\n            // print subtree rooted with last child\r\n            this.children[i].traverse();\r\n        }\r\n\r\n        // console.log(array);\r\n    }\r\n\r\n    find(key) {\r\n        if (this.parent == null) {\r\n            this.cost = 0;\r\n        }\r\n        let i = 0;\r\n        while (i < this.keys.length && key > this.keys[i]) {\r\n            // find key which is equal or greater than key\r\n            this.cost++;\r\n            i++;\r\n        }\r\n\r\n        if (this.keys[i] === key) {\r\n            // if key found return the key\r\n            return this;\r\n        }\r\n\r\n        if (this.leaf === true) {\r\n            // if the key is not found it is a leaf\r\n            // Alternative: If the node is a leaf then the key is not in the tree\r\n            return null;\r\n        }\r\n\r\n        // Adds cost to child if the next child is to be searched\r\n        this.children[i].cost = this.cost + 1;\r\n        return this.children[i].find(key); // go to child of the node to find the key\r\n    }\r\n\r\n    addChild(node, index) {\r\n        // Adds child at given index\r\n        this.children.splice(index, 0, node); // Adds node at given index\r\n        node.parent = this;\r\n    }\r\n\r\n    addKey(Key) {\r\n        if (!Key) return;\r\n        // Search fitting index for insertion and insert it\r\n        let index = 0;\r\n        while (index < this.keys.length && this.keys[index] < Key) {\r\n            index++;\r\n        }\r\n        this.keys.splice(index, 0, Key);\r\n    }\r\n\r\n    deleteChild(index) {\r\n        // If index is set delete child at index and return child\r\n        // (Returning the Child helps with copy operation)\r\n        if (!index) return;\r\n        let deletedChild = this.children.splice(index, 1)[0];\r\n        return deletedChild;\r\n    }\r\n\r\n    deleteKey(index) {\r\n        if (!index) return;\r\n        // Delete key at position if position is inside keys array and return deletedKey\r\n        // (Returning the Key helps with copy operation)\r\n        if (index >= this.keys.length) {\r\n            return null;\r\n        }\r\n        let deletedKey = this.keys.splice(index, 1)[0];\r\n        return deletedKey;\r\n    }\r\n\r\n    get numberOfKeys() {\r\n        return this.keys.length;\r\n    }\r\n\r\n    // Explanation: https://www.programiz.com/dsa/deletion-from-a-b-tree\r\n    // TODO: After merging if the parent node has less than the minimum number of keys then, look for the siblings as in Case I.\r\n    removeKey(value) {\r\n        console.log(`------- DELETING ${value} -------`);\r\n\r\n        // console.log(this.children[0].keys);\r\n\r\n        let index = this.keys.indexOf(value);\r\n        let indexInParentsChildren = this.parent.children.indexOf(this);\r\n\r\n        // NODE IS LEAF\r\n        if (this.leaf) {\r\n            console.log(\"Node is a leaf\");\r\n\r\n            // ENOUGH KEYS\r\n            if (this.keys.length > this.minKeys) {\r\n                console.log(\"Enough keys for simple deletion\");\r\n                return this.keys.splice(index, 1);\r\n            }\r\n\r\n            // NOT ENOUGH KEYS\r\n            console.log(\"NOT enough keys for simple removal\");\r\n\r\n            // SIBLING TO LEFT EXISTS\r\n            let leftSiblingsExists = indexInParentsChildren - 1 >= 0;\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Sibling to the left exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren - 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Left\");\r\n                }\r\n            }\r\n\r\n            // SIBLING TO RIGHT EXISTS\r\n            let rightSiblingExists = indexInParentsChildren + 1 < this.parent.children.length;\r\n            if (rightSiblingExists) {\r\n                console.log(\"Sibling to the right exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren + 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Right\");\r\n                }\r\n            }\r\n\r\n            // MERGE WITH LEFT SIBLING\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Merge with left sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Left\");\r\n            }\r\n\r\n            // MERGE WITH RIGHT SIBLING\r\n            if (rightSiblingExists) {\r\n                console.log(\"Merge with right sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Right\");\r\n            }\r\n        }\r\n\r\n        // NODE IS INTERNAL\r\n        console.log(\"Node is internal\");\r\n\r\n        // Check if child \"to the left\" has more than the minimum number of keys\r\n        // Index of deleted key === key of child that has lesser values\r\n\r\n        // STEAL FROM LEFT CHILD\r\n        if (this.children[index].keys.length > this.minKeys) {\r\n            console.log(\"Left child to key has enough keys\");\r\n\r\n            // Take highest key of left child\r\n            let highestKeyFromLeftChild = this.children[index].keys.splice(\r\n                this.children[index].keys.length - 1,\r\n                1\r\n            )[0];\r\n\r\n            // Put that key at the place where the old key was deleted\r\n            return (this.keys[index] = highestKeyFromLeftChild);\r\n        }\r\n\r\n        // STEAL FROM RIGHT CHILD\r\n        if (this.children[index + 1].keys.length > this.minKeys) {\r\n            console.log(\"Right child to key has enough keys\");\r\n\r\n            // Take lowest key from right child\r\n            let lowestKeyFromRightChild = this.children[index + 1].keys.splice(0, 1)[0];\r\n\r\n            // Put that key at the place where the old key was deleted\r\n            return (this.keys[index] = lowestKeyFromRightChild);\r\n        }\r\n\r\n        // MERGE LEFT AND RIGHT CHILDREN\r\n        this.keys.splice(index, 1);\r\n\r\n        // Get keys from left child\r\n        let keysFromLeftChild = this.children[index].keys;\r\n\r\n        // Put keys in right child\r\n        this.children[index + 1].keys.splice(0, 0, keysFromLeftChild);\r\n\r\n        this.children.splice(index, 1);\r\n\r\n        // CASE 3\r\n        // -------------------------------------------------------------------------------\r\n\r\n        if (this.keys < this.minKeys) {\r\n            console.log(\"NOT enough keys anymore\");\r\n\r\n            // SIBLING TO LEFT EXISTS\r\n            let leftSiblingsExists = indexInParentsChildren - 1 >= 0;\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Sibling to the left exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren - 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Left\");\r\n                }\r\n            }\r\n\r\n            // SIBLING TO RIGHT EXISTS\r\n            let rightSiblingExists = indexInParentsChildren + 1 < this.parent.children.length;\r\n            if (rightSiblingExists) {\r\n                console.log(\"Sibling to the right exists\");\r\n                // SIBLING HAS ENOUGH KEYS FOR THEFT\r\n                if (\r\n                    this.parent.children[indexInParentsChildren + 1].keys.length >\r\n                    this.minChildren - 1\r\n                ) {\r\n                    console.log(\"Has enough keys for theft\");\r\n                    return this.theftFromSibling(index, indexInParentsChildren, \"Right\");\r\n                }\r\n            }\r\n\r\n            // MERGE WITH LEFT SIBLING\r\n            if (leftSiblingsExists) {\r\n                console.log(\"Merge with left sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Left\");\r\n            }\r\n\r\n            // MERGE WITH RIGHT SIBLING\r\n            if (rightSiblingExists) {\r\n                console.log(\"Merge with right sibling\");\r\n                return this.mergeWithSibling(index, indexInParentsChildren, \"Right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    theftFromSibling(index, indexInParentsChildren, siblingSide) {\r\n        // Delete key in this node\r\n        this.keys.splice(index, 1);\r\n\r\n        // Set sibling dependent variables\r\n        let parentKeyIndexToSteal = siblingSide === \"Left\" ? 0 : this.parent.keys.length - 1;\r\n        let indexToPutParentKeyIn = siblingSide === \"Left\" ? 0 : this.keys.length;\r\n        let indexOffset = siblingSide === \"Left\" ? -1 : 1;\r\n        let siblingKeyIndexToSteal =\r\n            siblingSide === \"Left\"\r\n                ? this.parent.children[indexInParentsChildren - 1].keys.length - 1\r\n                : 0;\r\n        let parentIndexToPutSiblingKeyIn = siblingSide === \"Left\" ? 0 : this.parent.keys.length;\r\n\r\n        // Steal lowest / highest key from parent\r\n        let keyFromParent = this.parent.keys.splice(parentKeyIndexToSteal, 1)[0];\r\n        this.keys.splice(indexToPutParentKeyIn, 0, keyFromParent);\r\n\r\n        // Put highest / lowest key from right sibling in parent\r\n        let keyFromSibling = this.parent.children[indexInParentsChildren + indexOffset].keys.splice(\r\n            siblingKeyIndexToSteal,\r\n            1\r\n        )[0];\r\n        this.parent.keys.splice(parentIndexToPutSiblingKeyIn, 0, keyFromSibling);\r\n    }\r\n\r\n    mergeWithSibling(index, indexInParentsChildren, siblingSide) {\r\n        // Delete key in this node\r\n        this.keys.splice(index, 1);\r\n\r\n        // Set sibling dependent variables\r\n        let indexOffset = siblingSide === \"Left\" ? -1 : 1;\r\n        let siblingIndexToPutParentKeyIn =\r\n            siblingSide === \"Left\"\r\n                ? this.parent.children[indexInParentsChildren + indexOffset].keys.length\r\n                : 0;\r\n        let sibling = this.parent.children[indexInParentsChildren + indexOffset];\r\n\r\n        // Put lowest key from parent in sibling\r\n        let keyFromParent = this.parent.keys.splice(0, 1)[0];\r\n        this.parent.children[indexInParentsChildren + indexOffset].keys.splice(\r\n            siblingIndexToPutParentKeyIn,\r\n            0,\r\n            keyFromParent\r\n        );\r\n\r\n        // TODO: Check if this works for both sides\r\n        // Give children to sibling\r\n        if (this.children.length > 0) {\r\n            this.children.forEach((child) => {\r\n                child.parent = sibling;\r\n                sibling.addChild(child, sibling.children.length);\r\n            });\r\n        }\r\n\r\n        // Remove self from children list in parent\r\n        this.parent.children.splice(indexInParentsChildren, 1);\r\n    }\r\n}\r\n","import { TreeNode } from \"./TreeNode\";\r\n\r\nexport class Tree {\r\n    constructor(degree) {\r\n        this.root = null;\r\n        this.maxChildren = degree;\r\n        this.minChildren = Math.ceil(degree / 2);\r\n        this.maxKeys = degree - 1;\r\n        this.minKeys = Math.ceil(degree / 2) - 1;\r\n    }\r\n\r\n    traverse() {\r\n        if (this.root != null) {\r\n            //check if tree is empty\r\n            this.root.traverse();\r\n        } else {\r\n            console.log(\"Tree is empty\");\r\n        }\r\n    }\r\n\r\n    find(k) {\r\n        if (this.root === null) {\r\n            //check if tree is empty\r\n            return null;\r\n        } else {\r\n            if (this.root.find(k) != null || undefined) {\r\n                return this.root.find(k);\r\n            } else {\r\n                return \"Key not found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    insert(key) {\r\n        let currentRoot = this.root;\r\n\r\n        if (currentRoot === null) {\r\n            // Check if tree is empty\r\n            this.root = new TreeNode(this.maxChildren, true, null); // make new node as leaf\r\n            this.root.keys[0] = key; // add key to the node\r\n        } else if (currentRoot.numberOfKeys === this.maxKeys) {\r\n            // If root is full create a new node to become the root\r\n            // Make the old root a child of the new Root\r\n            let newRoot = new TreeNode(this.root.maxChildren, false, null);\r\n            newRoot.tree = this;\r\n            this.root = newRoot;\r\n            newRoot.addChild(currentRoot, 0);\r\n            this.splitNode(currentRoot, newRoot, 1);\r\n\r\n            // After split add key normally\r\n            this.insertNotFullNode(newRoot, parseInt(key));\r\n        } else {\r\n            // Else just insert the value into next best node\r\n            this.insertNotFullNode(currentRoot, parseInt(key));\r\n        }\r\n    }\r\n\r\n    splitNode(child, parent, index) {\r\n        // Create a new child\r\n        let newChild = new TreeNode(this.maxChildren, child.leaf, parent);\r\n\r\n        // Give the new child the keys from the old child\r\n        for (let k = 1; k < this.minChildren; k++) {\r\n            let deletedVal = child.deleteKey(this.minChildren);\r\n            newChild.addKey(deletedVal);\r\n        }\r\n\r\n        // Give the new child the children from the old child\r\n        if (!child.leaf) {\r\n            for (let k = 1; k <= this.minChildren; k++) {\r\n                let deletedKid = child.deleteChild(this.minChildren);\r\n                newChild.addChild(deletedKid, k - 1);\r\n            }\r\n        }\r\n\r\n        // Give parent the new child\r\n        parent.addChild(newChild, index);\r\n\r\n        // Give parent the key\r\n        let deletedVal = child.deleteKey(this.minChildren - 1);\r\n        parent.addKey(deletedVal);\r\n        parent.leaf = false;\r\n    }\r\n\r\n    insertNotFullNode(node, key) {\r\n        if (node.leaf) {\r\n            // Give lead node the key\r\n            node.addKey(key);\r\n            return;\r\n        }\r\n\r\n        // Iterate through the keys to see where the new Key should be added\r\n        let currentKeyIndex = node.numberOfKeys;\r\n        while (currentKeyIndex > 0 && key < node.keys[currentKeyIndex - 1]) {\r\n            currentKeyIndex--;\r\n        }\r\n\r\n        let inserted = false;\r\n        if (node.children[currentKeyIndex].numberOfKeys === this.maxKeys) {\r\n            // Split the node if node is already full\r\n            //inserted = true;\r\n            //node.children[temp].addKey(key);\r\n            this.splitNode(node.children[currentKeyIndex], node, currentKeyIndex + 1);\r\n\r\n            // After splitting the node check to which child the key should be added\r\n            if (key > node.keys[currentKeyIndex]) {\r\n                currentKeyIndex++;\r\n            }\r\n        }\r\n\r\n        if (inserted === false) {\r\n            this.insertNotFullNode(node.children[currentKeyIndex], key);\r\n        }\r\n        //if (node.numberOfKeys === 2 * this.maxChildren - 1 && node.parent == null) {\r\n        //  this.splitRoot();\r\n        //}\r\n    }\r\n\r\n    splitRoot() {\r\n        let newRoot = new TreeNode(this.maxChildren, false, null);\r\n        let oldRoot = this.root;\r\n        this.root = newRoot;\r\n\r\n        newRoot.addKey(oldRoot.deleteKey(this.minChildren - 1));\r\n\r\n        for (let i = 0; i < oldRoot.numberOfKeys; i++) {\r\n            let newChild = new TreeNode(this.maxChildren, false, this.root);\r\n\r\n            newChild.addKey(oldRoot.keys[i]);\r\n            newRoot.addChild(newChild, i);\r\n\r\n            for (let j = 0 + i; j < this.minChildren + i; j++) {\r\n                newChild.addChild(oldRoot.children[j + i], j);\r\n            }\r\n        }\r\n    }\r\n\r\n    delete(k) {\r\n        let nodeWithValue = this.find(k);\r\n\r\n        if (nodeWithValue === null) return null;\r\n\r\n        nodeWithValue.removeKey(k);\r\n    }\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid, { GridSize } from \"@material-ui/core/Grid\";\r\n\r\nimport Node from \"../../components/Node/Node\";\r\nimport Control from \"../../components/Control/Control\";\r\n\r\nimport { Tree } from \"./Tree\";\r\nimport { TreeNode } from \"./TreeNode\";\r\nimport node from \"../../components/Node/Node\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 5,\r\n    },\r\n    container: {\r\n        marginTop: 30,\r\n        borderRadius: 50,\r\n        backgroundColor: \"#E9E9E9\",\r\n        justifyContent: \"space-around\",\r\n    },\r\n    outerContainer: {\r\n        justifyContent: \"space-around\",\r\n    },\r\n    canvas: {\r\n        position: \"absolute\",\r\n    },\r\n});\r\n\r\n// TODO: Implement Search correctly (showing node of the key on display)\r\n\r\ninterface Props {}\r\n\r\nconst Bbaum: React.FC<Props> = () => {\r\n    const classes = useStyles();\r\n    //Knuth Order, k |  (min,max)  | CLRS Degree, t\r\n    // ---------------|-------------|---------------\r\n    //      0         |      -      |        –\r\n    //      1         |      –      |        –\r\n    //      2         |      –      |        –\r\n    //      3         |    (2,3)    |        –\r\n    //      4         |    (2,4)    |      t = 2\r\n    //      5         |    (3,5)    |        –\r\n    //      6         |    (3,6)    |      t = 3\r\n    //      7         |    (4,7)    |        –\r\n    //      8         |    (4,8)    |      t = 4\r\n    //      9         |    (5,9)    |        –\r\n    //      10        |    (5,10)   |      t = 5\r\n    let myTree: Tree = new Tree(4);\r\n\r\n    const [force, setForce] = useState<number>(1);\r\n    const [tree, setTree] = useState<Tree>(new Tree(4)); // Der tatsächliche Baum\r\n    const [nodeSize, setNodeSize] = useState<number>(tree.maxChildren);\r\n    const [order, setOrder] = useState(tree.maxChildren);\r\n    const [treeAsArray, setTreeAsArray] = useState<string[][][]>(\r\n        // TODO: Setzt Defaultwerte für das Array. Nur nötig, weil in der Rendermoethode hardgecoded auf explizite Indizes zugegriffen wird (kann später weg)\r\n        new Array(1).fill(new Array(1).fill(new Array(1).fill(\" \")))\r\n    );\r\n    const [cost, setCost] = useState<number>(-1);\r\n    const [searchNumber, setSearchNumber] = useState<string>(\"\");\r\n\r\n    const forceUpdate = () => {\r\n        let newForce: number = Math.random();\r\n        setForce(newForce);\r\n    };\r\n\r\n    const normalizeArray = () => {\r\n        treeTopBottom.forEach((level) => {\r\n            level.forEach((node) => {\r\n                while (node.length < nodeSize) {\r\n                    node.push(\"‎‎‏‏‎ ‎\");\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    const updateTree = () => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    };\r\n\r\n    const random = () => {};\r\n\r\n    const insert = (key: number) => {\r\n        let tempTree: Tree = tree;\r\n        tempTree.insert(key);\r\n        console.log(\"Inserted: \" + key);\r\n        myTree = tempTree;\r\n        setTree(tempTree);\r\n        forceUpdate();\r\n    };\r\n\r\n    const search = (key: number) => {\r\n        console.log(tree);\r\n        let node = tree.find(key);\r\n        if (node === null) {\r\n            setCost(-3);\r\n            return;\r\n        }\r\n        let nodeCost = node.cost;\r\n        if (nodeCost == null || undefined) {\r\n            console.log(\"Key not found\");\r\n            setCost(-2);\r\n        } else {\r\n            console.log(\"Cost:\" + nodeCost);\r\n            setCost(nodeCost);\r\n            console.log(myTree);\r\n            console.log(\"Search\");\r\n            for (let i = 0; i < 10; i++) {\r\n                setTimeout(() => {\r\n                    setSearchNumber(i % 2 === 0 ? key.toString() : \"\");\r\n                    forceUpdate();\r\n                }, 750 * i);\r\n            }\r\n        }\r\n    };\r\n\r\n    // FIXME: Algorithm doesnt reorder the nodes properly\r\n    const remove = (key: number) => {\r\n        let tempTree: Tree = tree;\r\n        tempTree.delete(key);\r\n        setTree(tempTree);\r\n        updateTree();\r\n        forceUpdate();\r\n        console.log(tree);\r\n    };\r\n\r\n    const reset = () => {\r\n        myTree.root = null;\r\n        tree.root = null;\r\n        updateTree();\r\n    };\r\n\r\n    const changeOrder = (order: number) => {\r\n        if (order < 4) order = 4;\r\n        let newOrder = Math.ceil(order / 2) * 2;\r\n        console.log(newOrder);\r\n        setOrder(newOrder);\r\n        let tempTree: Tree = new Tree(newOrder);\r\n        for (let i = 0; i < treeAsArray.length; i++) {\r\n            for (let j = 0; j < treeAsArray[i].length; j++) {\r\n                for (let k = 0; k < treeAsArray[i][j].length; k++) {\r\n                    tempTree.insert(treeAsArray[i][j][k]);\r\n                }\r\n            }\r\n        }\r\n        myTree = tempTree;\r\n        setTree(tempTree);\r\n    };\r\n\r\n    // Save tree from top to bottom as numbers\r\n    let treeTopBottom: string[][][] = [];\r\n    treeTopBottom[0] = [[]];\r\n\r\n    const traverseTreeBreadthFirst = (root: TreeNode | null, level: number) => {\r\n        if (root != null) {\r\n            let childIndex = 0;\r\n            // Initialize current tree level in array\r\n            treeTopBottom[level][childIndex] = [];\r\n\r\n            // Iterate over all keys of a node\r\n            root?.keys.forEach((key: string, index: number) => {\r\n                treeTopBottom[level][childIndex][index] = key;\r\n            });\r\n        }\r\n        treeTopBottom[1] = [];\r\n\r\n        traverseTreeBreadthFirstRecursion(root, 1);\r\n\r\n        normalizeArray();\r\n\r\n        return treeTopBottom;\r\n    };\r\n\r\n    const traverseTreeBreadthFirstRecursion = (root: TreeNode | null, level: number) => {\r\n        // console.log(\"Root level: \" + level);\r\n\r\n        let childIndex = 0;\r\n        // Determines the childIndex for the current level\r\n        for (let i = 0; i < treeTopBottom[level].length; i++) {\r\n            childIndex = i;\r\n        }\r\n        if (treeTopBottom[level].length > 1) {\r\n            childIndex++;\r\n        }\r\n\r\n        if (root != null) {\r\n            // Iterate over all children of root to get their values\r\n            root?.children.forEach((child) => {\r\n                treeTopBottom[level][childIndex] = [];\r\n\r\n                // Iterate over all keys of a node\r\n                child.keys.forEach((key: string, index: number) => {\r\n                    treeTopBottom[level][childIndex][index] = key;\r\n                });\r\n                childIndex++;\r\n            });\r\n            // Add border element to indicate children end of the current root\r\n            if (treeTopBottom[level].length !== 0) {\r\n                treeTopBottom[level][childIndex] = [\"border\"];\r\n            }\r\n\r\n            // Iterate over all children of a node\r\n            root.children.forEach((child) => {\r\n                childIndex = 0;\r\n                // Check if next level has been initialized\r\n                if (typeof treeTopBottom[level + 1] === \"undefined\") {\r\n                    // Define undefined level\r\n                    treeTopBottom[level + 1] = [];\r\n                }\r\n                traverseTreeBreadthFirstRecursion(child, level + 1);\r\n            });\r\n        }\r\n    };\r\n\r\n    // Neuer useEffect hook mit dependency bTree\r\n    // getRootAndChildren ausführen\r\n    // array normalisieren -> jedes array hat für jede node die selbe länge\r\n    // setBbaum() ausführen -> akutalisiert das ui\r\n    // in der render methode auf basis von bbaum das array rendern\r\n    useEffect(() => {\r\n        tree.traverse();\r\n        normalizeArray();\r\n\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n\r\n        // treeTopBottom[3][0] = [\"2\", \"1\"];\r\n        // treeTopBottom[3][1] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][2] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][3] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][4] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][5] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][6] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][7] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][8] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][9] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][10] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][11] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][12] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][13] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][14] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][15] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][16] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][17] = [\"border\", \"1\"];\r\n        // treeTopBottom[3][18] = [\"2\", \"4\"];\r\n        // treeTopBottom[3][19] = [\"border\", \"1\"];\r\n\r\n        normalizeArray();\r\n        treeTopBottom.forEach((element) => {\r\n            // console.log(element);\r\n        });\r\n\r\n        setTreeAsArray(treeTopBottom);\r\n\r\n        // treeTopBottom.map((item) => {\r\n        //     console.log(\"Test print Nodes: \" + item);\r\n        // });\r\n    }, []); // Wird zu Beginn einmal ausgeführt\r\n\r\n    useEffect(() => {\r\n        setNodeSize(tree.maxChildren);\r\n    }, [tree.maxChildren]);\r\n\r\n    useEffect(() => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    }, [nodeSize]);\r\n\r\n    useEffect(() => {\r\n        traverseTreeBreadthFirst(tree.root, 0);\r\n        setTreeAsArray(treeTopBottom);\r\n    }, [force]);\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Control\r\n                random={random}\r\n                insert={insert}\r\n                search={search}\r\n                remove={remove}\r\n                order={order}\r\n                changeOrder={changeOrder}\r\n                reset={reset}\r\n                cost={cost}\r\n                searchedFor={searchNumber}\r\n            />\r\n\r\n            {treeAsArray.map((level) => {\r\n                let hasBorder = false;\r\n\r\n                let levelCopy: string[][] = level;\r\n                let levelSplit: string[][][] = [];\r\n                let childrenIndex: number = 0;\r\n                let startIndex: number = 0;\r\n                let endIndex: number = 0;\r\n\r\n                level.forEach((node) => {\r\n                    levelSplit[childrenIndex] = [[]];\r\n                    if (node[0] === \"border\") {\r\n                        levelSplit[childrenIndex] = levelCopy.slice(startIndex, endIndex);\r\n                        childrenIndex++;\r\n\r\n                        startIndex = endIndex;\r\n                        // Skips border node\r\n                        startIndex++;\r\n\r\n                        hasBorder = true;\r\n                    }\r\n                    endIndex++;\r\n                });\r\n\r\n                // Adds whole level to levelSplit because level without borders wont be added in loop\r\n                if (!hasBorder) {\r\n                    levelSplit[childrenIndex] = levelCopy;\r\n                }\r\n\r\n                // Apply appropriate scaling factor to Grids\r\n                let scaling: number = 12;\r\n                if (levelSplit.length !== 0) {\r\n                    scaling = 12 / levelSplit.length;\r\n                    scaling = Math.round(scaling);\r\n                }\r\n                let scalingConvert: GridSize = scaling as GridSize;\r\n\r\n                // Return Grid for current level\r\n                return (\r\n                    <Grid className={classes.outerContainer} container>\r\n                        {levelSplit.map((element) => {\r\n                            return (\r\n                                <Grid className={classes.container} xs={scalingConvert} container>\r\n                                    {element.map((node) => {\r\n                                        return <Node searchedFor={searchNumber} values={node} />;\r\n                                    })}\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Bbaum;\r\n","import Bbaum from \"./components/Bbaum/Bbaum\";\r\n\r\nconst App: React.FC = () => {\r\n    return <Bbaum />;\r\n};\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n   /* roboto-300 - latin */\r\n//   @font-face {\r\n//     font-family: 'Roboto';\r\n//     font-style: normal;\r\n//     font-weight: 300;\r\n//     src: url('../fonts/roboto-v27-latin-300.eot'); /* IE9 Compat Modes */\r\n//     src: local(''),\r\n//          url('../fonts/roboto-v27-latin-300.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n//          url('../fonts/roboto-v27-latin-300.woff2') format('woff2'), /* Super Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.woff') format('woff'), /* Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.ttf') format('truetype'), /* Safari, Android, iOS */\r\n//          url('../fonts/roboto-v27-latin-300.svg#Roboto') format('svg'); /* Legacy iOS */\r\n//   }\r\n\r\n   *{\r\n        margin: 0;\r\n        padding: 0;\r\n        -moz-box-sizing: border-box;\r\n        -webkit-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n        font-family: \"Roboto\", sans-serif;\r\n   }\r\n\r\n   /* This is here to make my eyes hurt less at night */\r\n   body{\r\n      /* background-color: #292929; */\r\n      background-color: #F9F9F9;\r\n   }\r\n\r\n   /* html {\r\n        font-size: 62.5%;\r\n   } */\r\n   `;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#c62828\",\r\n        },\r\n        secondary: {\r\n            main: \"#ff9800\",\r\n        },\r\n        background: {\r\n            default: \"#00ff00\",\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GlobalStyle />\r\n        <ThemeProvider theme={theme}>\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}